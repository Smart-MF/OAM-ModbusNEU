;
; global custom
;
[custom]
; lib_deps =
;   https://github.com/hatlabs/ESPAsyncHTTPClient
build_flags =
  ; -D OPENKNX_LOOPTIME_WARNING=25
  ; add OPENKNX_WATCHDOG normal only in releases and not here
  -D OPENKNX_WATCHDOG
  -D KNX_ACTIVITYCALLBACK
  -D OPENKNX_LOOPTIME_WARNING=100
  -I lib/OGM-HardwareConfig/include/
  -D USE_TP_RX_QUEUE
  -D OPENKNX_OVERRIDE_MASK_VERSION=0x07B0
  ; -D OPENKNX_FREERTOS
  ; -D ARDUINO_LOOP1_STACK_SIZE=4096

[custom_develop]
extends = custom
build_flags =
  ${custom.build_flags}
  -D OPENKNX_HEARTBEAT
  ; -D OPENKNX_DEBUGGER
  ; -D OPENKNX_RUNTIME_STAT
  ; -D OPENKNX_RUNTIME_STAT_BUCKETN=7
  ; "-D OPENKNX_RUNTIME_STAT_BUCKETS=100, 200, 500, 1000, 2000, 5000"
  ; -D OPENKNX_HEARTBEAT_PRIO
  ; -D DEBUG_LOOP_TIME=10 ; will print a info when a loop took more than x ms.
  ; -D LOGIC_TRACE
  ; ; to see trace logs, they must match one of the 5 filters (TRACE_LOG1 .. TRACE_LOG2)
  "-D OPENKNX_TRACE1=Flash"
  ; "-D OPENKNX_TRACE1=VirtualButton.*"
  ; "-D OPENKNX_TRACE2=LED.*"
  "-D OPENKNX_TRACE5=Watchdog"
  ; -D OPENKNX_RTT
  ; -D BUFFER_SIZE_UP=10240
  ; "-D OPENKNX_TRACE3=modbusChannel<1>"
  ; "-D OPENKNX_TRACE4=modbusChannel<[3-5]>"

[custom_releases]
extends = custom
build_flags =
  ${custom.build_flags}

; RP2040
[RP2040_custom]
extends = RP2040, custom
build_flags =
  ; -D OPENKNX_RUNTIME_STAT
  -D modbus_FLASH_OFFSET=0xF2000
  -D modbus_FLASH_SIZE=0x1000
  -D SERIAL_DEBUG=Serial
  -D USE_KNX_DMA_UART=0
  -D USE_KNX_DMA_IRQ=0
  ; -D DEBUG_TP_FRAMES
  ; -D FORCE_ACK
  ; "-D OPENKNX_TRACE1=Button.*"

[develop_RP2040_BASE]
extends = RP2040_develop, RP2040_custom, custom_develop, RP2040_UPLOAD_USB
build_flags =
  ${RP2040_develop.build_flags}
  ${RP2040_custom.build_flags}
  ${custom_develop.build_flags}

[env:develop_RP2040_TP]
extends = develop_RP2040_BASE, RP2040_EXCHANGE_2MB
build_flags =
  ${develop_RP2040_BASE.build_flags}
  ${RP2040_EXCHANGE_2MB.build_flags}
  ${KNX_TP.build_flags}
  ; -D OKNXHW_REG1_ETH_V1
  ; -D KNX_IP_LAN
  ; -D BOARD_MASIFI_SENSOR_BREAKOUT
  ; -D OKNXHW_PIPICO_BCU_CONNECTOR
  ; -D OKNXHW_REG1_CONTROLLER2040
  ; -D OKNXHW_UP1_CONTROLLER2040
  ; -D OKNXHW_REG1_CONTROLLER2040
  ; -D OKNXHW_REG1_CONTROLLER2040_V1
  ; -D DEVICE_REG1_BASE
  -D DEVICE_SMARTMF_MODBUS_RTU_3BE
; build_unflags =
;   -D USE_TP_RX_QUEUE

[env:develop_RP2040_IP]
extends = develop_RP2040_BASE, RP2040_EXCHANGE_16MB
build_flags =
  ${develop_RP2040_BASE.build_flags}
  ${RP2040_EXCHANGE_16MB.build_flags}
  ${KNX_IP.build_flags}
  ; "-D OPENKNX_TRACE5=Network.*"
  -D DEVICE_REG1_BASE_IP
  ; -D OKNXHW_REG1_BASE_IP
  -D KNX_IP_LAN
  ; -D KNX_LOG_IP


[env:develop_RP2040_PICOW]
extends = develop_RP2040_BASE
board = rpipicow
build_flags =
  ${develop_RP2040_BASE.build_flags}
  ${KNX_IP.build_flags}
  -D KNX_IP_WIFI
  -D BOARD_PIPICOW
  -D OPENKNX_USB_EXCHANGE_IGNORE
  ; -D KNX_LOG_IP
  -Os

[env:develop_RP2040_TP_DUALCORE]
extends = env:develop_RP2040_TP
build_flags =
  ${env:develop_RP2040_TP.build_flags}
  -D OPENKNX_DUALCORE

; upload_protocol = espota
; upload_port = 192.168.13.33

[env:develop_RP2040_TP_JLINK]
extends = env:develop_RP2040_TP, UPLOAD_JLINK

[env:develop_RP2040_TP_DUALCORE_JLINK]
extends = env:develop_RP2040_TP_DUALCORE, UPLOAD_JLINK

[env:develop_RP2040_IP_JLINK]
extends = env:develop_RP2040_IP, UPLOAD_JLINK



; SAMD
[SAMD_custom]
extends = SAMD, custom
build_flags =
  -D modbus_FLASH_OFFSET=0x37900
  -D modbus_FLASH_SIZE=0x100
  -D SERIAL_DEBUG=SerialUSB
  -D KNX_SERIAL=Serial1
  ; -D NCN5120
  ${KNX_TP.build_flags}

[env:develop_SAMD]
extends = SAMD_develop, SAMD_custom, custom_develop, SAMD_UPLOAD_USB
build_flags =
  ${SAMD_develop.build_flags}
  ${SAMD_custom.build_flags}
  ${custom_develop.build_flags}
  -D DEVICE_WEMOS_MINI_D1
  ; -D BOARD_KONNEKTING_MI
  ; -D BOARD_MASIFI_V3
debug_build_flags =
  -Os

[env:develop_SAMD_JLINK]
extends = env:develop_SAMD, UPLOAD_JLINK

; ESP32
[ESP32_custom]
extends = ESP32, custom
build_flags =
  ; -D OPENKNX_RUNTIME_STAT
  -D SERIAL_DEBUG=Serial
  -D KNX_SERIAL=Serial2
  -D OPENKNX_USB_EXCHANGE_IGNORE

; board = adafruit_feather_esp32_v2
; board_build.partitions = lib/OGM-Common/data/partition/esp32_4mb.csv

[env:develop_ESP32_IP]
extends = ESP32_develop, ESP32_custom, custom_develop, ESP32_8MB, ESP32_UPLOAD_USB
lib_deps = https://github.com/mlesniew/PicoMQTT
build_flags =
  ${KNX_IP.build_flags}
  ${ESP32_develop.build_flags}
  ${ESP32_custom.build_flags}
  ${custom_develop.build_flags}
  -D DEVICE_DEV_REG1_LAN_TP_Base_V00_11
  -D KNX_IP_LAN
  -D CONFIG_ETH_ENABLED
  -D OPENKNX_DUALCORE
  -D OPENKNX_MQTT
  -D OPENKNX_USB_EXCHANGE_IGNORE

; upload_protocol = espota
; upload_port = 192.168.13.33


[env:develop_ESP32_WIP]
extends = ESP32_develop, ESP32_custom, custom_develop, ESP32_8MB, ESP32_UPLOAD_USB
build_flags =
  ${KNX_IP.build_flags}
  ${ESP32_develop.build_flags}
  ${ESP32_custom.build_flags}
  ${custom_develop.build_flags}
  -D DEVICE_DEV_REG1_LAN_TP_Base_V00_11
  -D KNX_IP_WIFI
  ; -D CONFIG_ETH_ENABLED
  -D OPENKNX_DUALCORE

; upload_protocol = espota
; upload_port = 192.168.13.9

[env:develop_ESP32_TP]
extends = ESP32_develop, ESP32_custom, custom_develop, ESP32_8MB, ESP32_UPLOAD_USB
build_flags =
  ${KNX_TP.build_flags}
  ${ESP32_develop.build_flags}
  ${ESP32_custom.build_flags}
  ${custom_develop.build_flags}
  -D DEVICE_DEV_REG1_LAN_TP_Base_V00_11
  ;-D OPENKNX_DUALCORE
  -D CONFIG_ETH_ENABLED
  ; -D OPENKNX_WATCHDOG_MAX_PERIOD=3


[env:develop_WT32_ETH01]
extends = ESP32_develop, ESP32_custom, custom_develop, ESP32_UPLOAD_USB
build_flags =
  ${KNX_IP.build_flags}
  ${ESP32_develop.build_flags}
  ${ESP32_custom.build_flags}
  ${custom_develop.build_flags}
  -D BOARD_ESP32_WT32_ETH01
  -D CONFIG_ETH_ENABLED 
  -D KNX_IP_LAN
board = wt32-eth01

[env:develop_REG1_ESP_DEV_IP]
lib_deps = https://github.com/mlesniew/PicoMQTT
extends = ESP32_develop, ESP32_custom, custom_develop, ESP32_8MB, ESP32_UPLOAD_JTAG
build_flags =
  ${KNX_IP.build_flags}
  ${ESP32_develop.build_flags}
  ${ESP32_custom.build_flags}
  ${custom_develop.build_flags}
  -D DEVICE_DEV_REG1_LAN_TP_Base_V00_11
  -D CONFIG_ETH_ENABLED 
  -D KNX_IP_LAN
board = esp32dev

[env:develop_REG1_ESP_DEV_TP]
extends = ESP32_develop, ESP32_custom, custom_develop, ESP32_8MB, ESP32_UPLOAD_USB
build_flags =
  ${KNX_TP.build_flags}
  ${ESP32_develop.build_flags}
  ${ESP32_custom.build_flags}
  ${custom_develop.build_flags}
  -D DEVICE_DEV_REG1_LAN_TP_Base_V00_11
board = esp32dev

[env:develop_REG1_ESP_DEV_TPIP]
lib_deps = https://github.com/mlesniew/PicoMQTT
extends = ESP32_develop, ESP32_custom, custom_develop, ESP32_8MB, ESP32_UPLOAD_USB
build_flags =
  ${KNX_TP.build_flags}
  ${ESP32_develop.build_flags}
  ${ESP32_custom.build_flags}
  ${custom_develop.build_flags}
  -D DEVICE_DEV_REG1_LAN_TP_Base_V00_11
  -D CONFIG_ETH_ENABLED 
  -D KNX_IP_LAN
  -D OPENKNX_MQTT
board = esp32dev

; Releases
[env:release_SAMD]
extends = SAMD_releases, SAMD_custom
build_flags =
   ${SAMD_releases.build_flags}
   ${SAMD_custom.build_flags}
   ${custom_releases.build_flags}
  -D BOARD_KONNEKTING_MI

[env:release_RP2040_TP]
extends = RP2040_releases, RP2040_custom, RP2040_EXCHANGE_16MB, UPLOAD_JLINK
build_flags =
  ${RP2040_releases.build_flags}
  ${RP2040_custom.build_flags}
  ${custom_releases.build_flags}
  ${RP2040_EXCHANGE_16MB.build_flags}
  ${KNX_TP.build_flags}
  ; -D BOARD_MASIFI_SENSOR_BREAKOUT
  -D OKNXHW_REG1_CONTROLLER2040_V1

[env:release_PiPico_BCU_Connector]
extends = RP2040_releases, RP2040_custom, RP2040_EXCHANGE_2MB, RP2040_UPLOAD_USB
build_flags =
  ${RP2040_releases.build_flags}
  ${RP2040_custom.build_flags}
  ${custom_releases.build_flags}
  ${RP2040_EXCHANGE_2MB.build_flags}
  ${KNX_TP.build_flags}
  -D OKNXHW_PIPICO_BCU_CONNECTOR
  ; -D FORCE_ACK

[env:release_ESP32]
extends = ESP32_releases, ESP32_custom
build_flags =
   ${ESP32_releases.build_flags}
   ${ESP32_custom.build_flags}
   ${custom_releases.build_flags}
  -D BOARD_ESP32_DEV
